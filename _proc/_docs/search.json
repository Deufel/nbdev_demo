[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_demo",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "nbdev_demo"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev_demo",
    "section": "Install",
    "text": "Install\npip install nbdev-demo",
    "crumbs": [
      "nbdev_demo"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_demo",
    "section": "How to use",
    "text": "How to use\nThis library provides a [`Card`](https://Deufel.github.io/nbdev_demo/card.html#card) class you can use to display, and compare playing cards:\n\nCard(suit=1,rank=4)\n\n4♦️\n\n\nSuits are numbered according to this list:\n\nsuits\n\n['♣️', '♦️', '♥️', '♠️']",
    "crumbs": [
      "nbdev_demo"
    ]
  },
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "Deck",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\nInitialize self. See help(type(self)) for accurate signature.\nWhen instanciate a Deck there are all cards present:\n\ndeck = Deck()\ndeck\n\nA♣️; 2♣️; 3♣️; 4♣️; 5♣️; 6♣️; 7♣️; 8♣️; 9♣️; 10♣️; J♣️; Q♣️; K♣️; A♦️; 2♦️; 3♦️; 4♦️; 5♦️; 6♦️; 7♦️; 8♦️; 9♦️; 10♦️; J♦️; Q♦️; K♦️; A♥️; 2♥️; 3♥️; 4♥️; 5♥️; 6♥️; 7♥️; 8♥️; 9♥️; 10♥️; J♥️; Q♥️; K♥️; A♠️; 2♠️; 3♠️; 4♠️; 5♠️; 6♠️; 7♠️; 8♠️; 9♠️; 10♠️; J♠️; Q♠️; K♠️\n\n\nTest Create New Deck…\n\ndeck = Deck()\ntest_eq(len(deck), 52)\n\nTest the pop function…\n\ndeck = Deck()\ntest_eq(deck.pop(), Card(3,13))\n\ntest the remove function…\n\n\n\ndraw_n\n\n draw_n (n:int, replace:bool=True)\n\nDraw n cards, with replacement iif replace\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nn\nint\n\nnumber of cards to draw\n\n\nreplace\nbool\nTrue\nwhether or not draw with replacement\n\n\n\nsimple test to see if the draw_n draws the correct number of cards\n\ntest_eq(len(draw_n(5)), 5)",
    "crumbs": [
      "Deck"
    ]
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card",
    "section": "",
    "text": "suits\n\n['♣️', '♦️', '♥️', '♠️']\n\n\nfor example the suit ar index 0:\n\nsuits[0]\n\n'♣️'\n\n\n\nranks\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\n\n\nfor exampel the rank at index 1 (note no rank at index 1 so that 2 - 10 match)\n\nranks[1]\n\n'A'\n\n\n\nsource\n\nCard\n\n Card (suit:int, rank:int)\n\nA playing card\n\n\n\n\nType\nDetails\n\n\n\n\nsuit\nint\nAn index into suits\n\n\nrank\nint\nan index into ranks\n\n\n\n\nc = Card(suit=1, rank=3)\nc\n\n3♦️\n\n\n\n\nComparison opperators\nequality, less than, and greater than should work on rank and suit indicies\n\ntest_eq(Card(suit=1, rank=3), Card(suit=1, rank=3))\ntest_ne(Card(suit=1, rank=12), Card(suit=3, rank=12))\ntest_ne(Card(suit=1, rank=3), Card(suit=3, rank=3))\n\nassert Card(suit=1, rank=3) &lt; Card(suit=2, rank=3)\n\nassert Card(suit=3, rank=3) &gt; Card(suit=2, rank=3)\nassert not Card(suit=1, rank=3) &gt; Card(suit=2, rank=3)",
    "crumbs": [
      "card"
    ]
  }
]