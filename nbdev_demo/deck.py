# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_deck.ipynb.

# %% auto 0
__all__ = ['c23', 'deck', 'Deck', 'draw_n']

# %% ../nbs/01_deck.ipynb 2
from .card import *

# %% ../nbs/01_deck.ipynb 4
class Deck:
    def __init__(self): self.cards = [Card(s,r) for s in range(4) for r in range(1, 14)]
    def __len__(self): return len(self.cards)
    def __str__(self): return '; '.join(map(str, self.cards))
    def __iter__(self): return iter(self.cards)
    __repr__ = __str__
    def pop(self,
            idx: int=-1): # the index of the card to remove, defaulting to the last one
        "Remove one card from the deck"
        return self.cards.pop(idx)
    def remove(self, 
               card:Card): # Card to remove
        "Removes `card` from the deck or raises exception if it is not in deck"
        return self.cards.remove(card)
    def shuffle(self): random.shuffle(self.cards)
        

# %% ../nbs/01_deck.ipynb 12
c23 = Card(2,3)
deck = Deck()
print(f"card: {c23}")
print(f"deck length = {len(deck)}")
deck.remove(c23)
print(f"deck length = {len(deck)}")
deck

assert c23 not in deck

# %% ../nbs/01_deck.ipynb 13
def draw_n(n:int, # number of cards to draw
           replace:bool=True): # whether or not draw with replacement
    "Draw `n` cards, with replacement iif `replace`"
    d = Deck()
    d.shuffle()
    if replace: return [d.cards[random.choice(range(len(d.cards)))] for _ in range(n)]
    else: return d.cards[:n]

